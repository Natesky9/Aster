<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>anchor_x = room_width/2
anchor_y = room_height/2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir = point_direction(anchor_x,anchor_y,mouse_x,mouse_y)
x = anchor_x + lengthdir_x(room_width/2,dir)
y = anchor_y + lengthdir_y(room_height/2,dir)
direction = point_direction(x,y,anchor_x,anchor_y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>new_bullet = instance_create(x,y,bullet)
sound(beep)
with new_bullet
    {
    direction = other.direction
    speed = 2
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i


if instance_number(Rock) == 0
    {
    draw_set_color(c_black)
    draw_set_halign(fa_center)
    draw_set_valign(fa_middle)
    draw_text(room_width/2,room_height/2,"Press Space to spawn Asteroid!")
    }
else
    {
    draw_set_halign(fa_center)
    draw_set_valign(fa_top)
    draw_set_color(c_black)
    draw_text(room_width/2,0,"mouse controls,left click to fire")
    draw_set_valign(fa_bottom)
    draw_text(room_width/2,room_height,"Asteroid, left click to delete, right click to recolor")
    }

draw_set_halign(fa_left)
draw_set_valign(fa_top)
draw_text(0,0,string(instance_number(Rock)))
draw_set_color(c_blue)
draw_circle(x,y,5,false)

draw_set_color(c_white)
draw_line(x,y,x+lengthdir_x(16,direction),y+lengthdir_y(16,direction))

inc = 32
dist = point_distance(x,y,anchor_x,anchor_y)

if instance_exists(Rock)
    {
    test_x = x
    test_y = y
    
    get_rock = instance_nearest(x,y,Rock)
    for (r = 0;r &lt; inc;r += 1)
        {
        test_x += lengthdir_x(dist/inc,direction)
        test_y += lengthdir_y(dist/inc,direction)
        if Collision_Rock(get_rock,test_x,test_y)
        break

        }
    
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var new_rock = instance_create(anchor_x,anchor_y,Rock)
with new_rock
    {
    w = 2
    h = 4
    size = 16
    xoff = (size*w*3+size/2)/2
    yoff = (sqrt(3)/2*(h+1)*size)/2
    Create_Rock()
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
